[gd_scene load_steps=33 format=3 uid="uid://cp4al2l72hk7b"]

[ext_resource type="Texture2D" uid="uid://djcmovl3kmajv" path="res://addons/kenney_prototype_textures/green/texture_01.png" id="1_go1r8"]
[ext_resource type="Material" uid="uid://be3a3ld2snpvf" path="res://projects/third_person_platform_character/resources/white_material.tres" id="1_sc38g"]
[ext_resource type="Material" uid="uid://ef8th42nd3u8" path="res://projects/third_person_platform_character/resources/purple_standard_material_3d.tres" id="2_2s66j"]
[ext_resource type="PackedScene" uid="uid://dve48g6s3vd5x" path="res://projects/third_person_platform_character/scenes/third_person_platform_character.tscn" id="3_p5bmj"]
[ext_resource type="PackedScene" uid="uid://b62a40dxi0mey" path="res://scenes/UI/components/fullscreen_button.tscn" id="4_3nhlw"]
[ext_resource type="Material" uid="uid://csr3mxmx4ngi8" path="res://projects/third_person_platform_character/resources/red_chess_standard_material_3d.tres" id="4_cqotc"]
[ext_resource type="PackedScene" uid="uid://ovxpxpqu8wx8" path="res://projects/third_person_platform_character/scenes/house.tscn" id="5_vhhpf"]
[ext_resource type="Script" path="res://projects/third_person_platform_character/scripts/ui.gd" id="7_atcry"]
[ext_resource type="PackedScene" uid="uid://d3d826vi5r1lo" path="res://scenes/UI/components/back_button.tscn" id="8_5a43x"]
[ext_resource type="PackedScene" uid="uid://cftexlww4ggcm" path="res://scenes/UI/components/pause_button.tscn" id="9_th6ak"]
[ext_resource type="PackedScene" uid="uid://cpfot5korx1b0" path="res://scenes/UI/components/pause_screen.tscn" id="10_o2lfx"]
[ext_resource type="Theme" uid="uid://tpkjaiuml3dn" path="res://resources/bold.tres" id="12_htkkk"]
[ext_resource type="Theme" uid="uid://8bxk187yykx0" path="res://resources/medium.tres" id="13_84dsg"]
[ext_resource type="Texture2D" uid="uid://dyvc5n2yk24ig" path="res://assets/UI/icons_buttons/wasd.png" id="14_ydcgs"]
[ext_resource type="Texture2D" uid="uid://d15golar13dbt" path="res://assets/UI/gameicons-expansion/PNG/Black/2x/mouse.png" id="15_d50kw"]
[ext_resource type="Texture2D" uid="uid://wgkjl2vnlbrx" path="res://assets/UI/icons_buttons/spacebar.png" id="16_2qreg"]
[ext_resource type="Texture2D" uid="uid://iu62kea6sqe3" path="res://assets/UI/icons_buttons/shift.svg" id="17_uf3nf"]
[ext_resource type="Texture2D" uid="uid://b67rtg0r5nm8v" path="res://assets/UI/icons_buttons/ctrl.svg" id="18_ivlgj"]
[ext_resource type="PackedScene" uid="uid://ctnl2hxsxcbi3" path="res://scenes/UI/components/button_with_hint.tscn" id="19_3iy03"]
[ext_resource type="Texture2D" uid="uid://ygata4q6b1oa" path="res://assets/UI/gameicons/PNG/Black/2x/information.png" id="20_boi75"]
[ext_resource type="Texture2D" uid="uid://bp0ww172q8p81" path="res://assets/UI/gameicons/PNG/White/2x/information.png" id="21_nxh3y"]

[sub_resource type="BoxMesh" id="BoxMesh_rbv4l"]
material = ExtResource("1_sc38g")
size = Vector3(50, 0.5, 50)

[sub_resource type="ConvexPolygonShape3D" id="ConvexPolygonShape3D_egi8v"]
points = PackedVector3Array(-25, -0.25, -25, -25, 0.25, -25, 25, -0.25, -25, -25, -0.25, 25, -25, 0.25, 25, 25, 0.25, -25, 25, -0.25, 25, 25, 0.25, 25)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_kw008"]
albedo_texture = ExtResource("1_go1r8")
uv1_triplanar = true
uv1_world_triplanar = true

[sub_resource type="Shader" id="Shader_7niad"]
code = "// Cloud Raymarching based on: A. Schneider. “The Real-Time Volumetric Cloudscapes Of Horizon: Zero Dawn”. ACM SIGGRAPH. Los Angeles, CA: ACM SIGGRAPH, 2015. Web. 26 Aug. 2015.

shader_type sky;
render_mode use_half_res_pass, use_quarter_res_pass;

uniform sampler3D worlnoise : filter_linear_mipmap, repeat_enable;
uniform sampler3D perlworlnoise : filter_linear_mipmap, repeat_enable;
uniform sampler2D weathermap : filter_linear_mipmap, repeat_enable;

uniform float _density : hint_range(0.01, 0.2) = 0.05;
uniform float cloud_coverage :hint_range(0.1, 1.0) = 0.25;
uniform float _time_scale :hint_range(0.0, 20.0) = 1.0;
uniform float _time_offset : hint_range(0.0, 1000.0, 0.5) = 0.0;

// Approximately earth sizes
const float g_radius = 6000000.0; //ground radius
const float sky_b_radius = 6001500.0;//bottom of cloud layer
const float sky_t_radius = 6004000.0;//top of cloud layer

uniform float rayleigh : hint_range(0, 64) = 2.0;
uniform vec4 rayleigh_color : source_color = vec4(0.26, 0.41, 0.58, 1.0);
uniform float mie : hint_range(0, 1) = 0.005;
uniform float mie_eccentricity : hint_range(-1, 1) = 0.8;
uniform vec4 mie_color : source_color = vec4(0.63, 0.77, 0.92, 1.0);

uniform float turbidity : hint_range(0, 1000) = 10.0;
uniform float sun_disk_scale : hint_range(0, 360) = 1.0;
uniform vec4 ground_color : source_color = vec4(1.0);
uniform float exposure : hint_range(0, 128) = 0.1;

const vec3 UP = vec3( 0.0, 1.0, 0.0 );

// Sun constants
const float SOL_SIZE = 0.00872663806;
const float SUN_ENERGY = 1000.0;

// optical length at zenith for molecules
const float rayleigh_zenith_size = 8.4e3;
const float mie_zenith_size = 1.25e3;

// From: https://www.shadertoy.com/view/4sfGzS credit to iq
float hash(vec3 p) {
	p  = fract( p * 0.3183099 + 0.1 );
	p *= 17.0;
	return fract(p.x * p.y * p.z * (p.x + p.y + p.z));
}

// Utility function that maps a value from one range to another. 
float remap(float originalValue,  float originalMin,  float originalMax,  float newMin,  float newMax) {
	return newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * (newMax - newMin));
}

// Phase function
float henyey_greenstein(float cos_theta, float g) {
	const float k = 0.0795774715459;
	return k * (1.0 - g * g) / (pow(1.0 + g * g - 2.0 * g * cos_theta, 1.5));
}

// Simple Analytic sky. In a real project you should use a texture
vec3 atmosphere(vec3 eye_dir) {
	float zenith_angle = clamp( dot(UP, normalize(LIGHT0_DIRECTION)), -1.0, 1.0 );
	float sun_energy = max(0.0, 1.0 - exp(-((PI * 0.5) - acos(zenith_angle)))) * SUN_ENERGY * LIGHT0_ENERGY;
	float sun_fade = 1.0 - clamp(1.0 - exp(LIGHT0_DIRECTION.y), 0.0, 1.0);

	// Rayleigh coefficients.
	float rayleigh_coefficient = rayleigh - ( 1.0 * ( 1.0 - sun_fade ) );
	vec3 rayleigh_beta = rayleigh_coefficient * rayleigh_color.rgb * 0.0001;
	// mie coefficients from Preetham
	vec3 mie_beta = turbidity * mie * mie_color.rgb * 0.000434;

	// optical length
	float zenith = acos(max(0.0, dot(UP, eye_dir)));
	float optical_mass = 1.0 / (cos(zenith) + 0.15 * pow(93.885 - degrees(zenith), -1.253));
	float rayleigh_scatter = rayleigh_zenith_size * optical_mass;
	float mie_scatter = mie_zenith_size * optical_mass;

	// light extinction based on thickness of atmosphere
	vec3 extinction = exp(-(rayleigh_beta * rayleigh_scatter + mie_beta * mie_scatter));

	// in scattering
	float cos_theta = dot(eye_dir, normalize(LIGHT0_DIRECTION));

	float rayleigh_phase = (3.0 / (16.0 * PI)) * (1.0 + pow(cos_theta * 0.5 + 0.5, 2.0));
	vec3 betaRTheta = rayleigh_beta * rayleigh_phase;

	float mie_phase = henyey_greenstein(cos_theta, mie_eccentricity);
	vec3 betaMTheta = mie_beta * mie_phase;

	vec3 Lin = pow(sun_energy * ((betaRTheta + betaMTheta) / (rayleigh_beta + mie_beta)) * (1.0 - extinction), vec3(1.5));
	// Hack from https://github.com/mrdoob/three.js/blob/master/examples/jsm/objects/Sky.js
	Lin *= mix(vec3(1.0), pow(sun_energy * ((betaRTheta + betaMTheta) / (rayleigh_beta + mie_beta)) * extinction, vec3(0.5)), clamp(pow(1.0 - zenith_angle, 5.0), 0.0, 1.0));

	// Hack in the ground color
	Lin  *= mix(ground_color.rgb, vec3(1.0), smoothstep(-0.1, 0.1, dot(UP, eye_dir)));

	// Solar disk and out-scattering
	float sunAngularDiameterCos = cos(SOL_SIZE * sun_disk_scale);
	float sunAngularDiameterCos2 = cos(SOL_SIZE * sun_disk_scale*0.5);
	float sundisk = smoothstep(sunAngularDiameterCos, sunAngularDiameterCos2, cos_theta);
	vec3 L0 = (sun_energy * 1900.0 * extinction) * sundisk * LIGHT0_COLOR;
	// Note: Add nightime here: L0 += night_sky * extinction

	vec3 color = (Lin + L0) * 0.04;
	color = pow(color, vec3(1.0 / (1.2 + (1.2 * sun_fade))));
	color *= exposure;
	return color;
}

float GetHeightFractionForPoint(float inPosition) { 
	float height_fraction = (inPosition -  sky_b_radius) / (sky_t_radius - sky_b_radius); 
	return clamp(height_fraction, 0.0, 1.0);
}

vec4 mixGradients(float cloudType){
	const vec4 STRATUS_GRADIENT = vec4(0.02f, 0.05f, 0.09f, 0.11f);
	const vec4 STRATOCUMULUS_GRADIENT = vec4(0.02f, 0.2f, 0.48f, 0.625f);
	const vec4 CUMULUS_GRADIENT = vec4(0.01f, 0.0625f, 0.78f, 1.0f);
	float stratus = 1.0f - clamp(cloudType * 2.0f, 0.0, 1.0);
	float stratocumulus = 1.0f - abs(cloudType - 0.5f) * 2.0f;
	float cumulus = clamp(cloudType - 0.5f, 0.0, 1.0) * 2.0f;
	return STRATUS_GRADIENT * stratus + STRATOCUMULUS_GRADIENT * stratocumulus + CUMULUS_GRADIENT * cumulus;
}

float densityHeightGradient(float heightFrac, float cloudType) {
	vec4 cloudGradient = mixGradients(cloudType);
	return smoothstep(cloudGradient.x, cloudGradient.y, heightFrac) - smoothstep(cloudGradient.z, cloudGradient.w, heightFrac);
}

float intersectSphere(vec3 pos, vec3 dir,float r) {
    float a = dot(dir, dir);
    float b = 2.0 * dot(dir, pos);
    float c = dot(pos, pos) - (r * r);
	float d = sqrt((b*b) - 4.0*a*c);
	float p = -b - d;
	float p2 = -b + d;
    return max(p, p2) / (2.0 * a);
}

// Returns density at a given point
// Heavily based on method from Schneider
float density(vec3 pip, vec3 weather, float mip) {
	float time = mod(TIME, 100.0);
	vec3 p = pip;
	p.x += time * 10.0 * _time_scale + _time_offset;
	float height_fraction = GetHeightFractionForPoint(length(p));
	vec4 n = textureLod(perlworlnoise, p.xyz*0.00008, mip-2.0);
	float fbm = n.g*0.625+n.b*0.25+n.a*0.125;
	float g = densityHeightGradient(height_fraction, weather.r);
	float base_cloud = remap(n.r, -(1.0-fbm), 1.0, 0.0, 1.0);
	float weather_coverage = cloud_coverage*weather.b;
	base_cloud = remap(base_cloud*g, 1.0-(weather_coverage), 1.0, 0.0, 1.0);
	base_cloud *= weather_coverage;
	p.xy -= time * 40.0;
	vec3 hn = textureLod(worlnoise, p*0.001, mip).rgb;
	float hfbm = hn.r*0.625+hn.g*0.25+hn.b*0.125;
	hfbm = mix(hfbm, 1.0-hfbm, clamp(height_fraction*4.0, 0.0, 1.0));
	base_cloud = remap(base_cloud, hfbm*0.4 * height_fraction, 1.0, 0.0, 1.0);
	return pow(clamp(base_cloud, 0.0, 1.0), (1.0 - height_fraction) * 0.8 + 0.5);
}

vec4 march(vec3 pos,  vec3 end, vec3 dir, int depth) {
	const vec3 RANDOM_VECTORS[6] = {vec3( 0.38051305f,  0.92453449f, -0.02111345f),vec3(-0.50625799f, -0.03590792f, -0.86163418f),vec3(-0.32509218f, -0.94557439f,  0.01428793f),vec3( 0.09026238f, -0.27376545f,  0.95755165f),vec3( 0.28128598f,  0.42443639f, -0.86065785f),vec3(-0.16852403f,  0.14748697f,  0.97460106f)};
	float T = 1.0;
	float alpha = 0.0;
	float ss = length(dir);
	dir = normalize(dir);
	vec3 p = pos + hash(pos * 10.0) * ss;
	const float t_dist = sky_t_radius-sky_b_radius;
	float lss = (t_dist / 36.0);
	vec3 ldir = normalize(LIGHT0_DIRECTION);
	vec3 L = vec3(0.0);
	int count=0;
	float t = 1.0;
	float costheta = dot(ldir, dir);
	// Stack multiple phase functions to emulate some backscattering
	float phase = max(max(henyey_greenstein(costheta, 0.6), henyey_greenstein(costheta, (0.4 - 1.4 * ldir.y))), henyey_greenstein(costheta, -0.2));
	// Precalculate sun and ambient colors
	// This should really come from a uniform or texture for performance reasons
	vec3 atmosphere_sun = atmosphere(LIGHT0_DIRECTION) * LIGHT0_ENERGY * ss * 0.1;
	vec3 atmosphere_ambient = atmosphere(normalize(vec3(1.0, 1.0, 0.0)));
	vec3 atmosphere_ground = atmosphere(normalize(vec3(1.0, -1.0, 0.0)));
	
	const float weather_scale = 0.00006;
	const float time = mod(TIME, 100.0) * 0.003 * _time_scale + 0.005*_time_offset;
	const vec2 weather_pos = vec2(time * 0.9, time);
	
	for (int i = 0; i < depth; i++) {
		p += dir * ss;
		vec3 weather_sample = texture(weathermap, p.xz * weather_scale + 0.5 + weather_pos).xyz;
		float height_fraction = GetHeightFractionForPoint(length(p));

		t = density(p, weather_sample, 0.0);
		float dt = exp(-_density*t*ss);
		T *= dt;
		vec3 lp = p;
		float lt = 1.0;
		float cd = 0.0;

		if (t > 0.0) { //calculate lighting, but only when we are in the cloud
			float lheight_fraction = 0.0;
			for (int j = 0; j < 6; j++) {
				lp += (ldir + RANDOM_VECTORS[j]*float(j))*lss;
				lheight_fraction = GetHeightFractionForPoint(length(lp));
				vec3 lweather = texture(weathermap, lp.xz * weather_scale + 0.5 + weather_pos).xyz;
				lt = density(lp, lweather, float(j));
				cd += lt;
			}
			
			// Take a single distant sample
			lp = p + ldir * 18.0 * lss;
			lheight_fraction = GetHeightFractionForPoint(length(lp));
			vec3 lweather = texture(weathermap, lp.xz * weather_scale + 0.5).xyz;
			lt = pow(density(lp, lweather, 5.0), (1.0 - lheight_fraction) * 0.8 + 0.5);
			cd += lt;
			
			// captures the direct lighting from the sun
			float beers = exp(-_density * cd * lss);
			float beers2 = exp(-_density * cd * lss * 0.25) * 0.7;
			float beers_total = max(beers, beers2);

			vec3 ambient = mix(atmosphere_ground, vec3(1.0), smoothstep(0.0, 1.0, height_fraction)) * _density * mix(atmosphere_ambient, vec3(1.0), 0.4) * (LIGHT0_DIRECTION.y);
			alpha += (1.0 - dt) * (1.0 - alpha);
			L += (ambient + beers_total * atmosphere_sun * phase * alpha) * T * t;
		}
	}
	return clamp(vec4(L, alpha), 0.0, 1.0);
}

void sky() {
	vec3 dir = EYEDIR;

	vec4 col = vec4(0.0);
	if (dir.y>0.0) {
		vec3 camPos = vec3(0.0, g_radius, 0.0);
		vec3 start = camPos + dir * intersectSphere(camPos, dir, sky_b_radius);
		vec3 end = camPos + dir * intersectSphere(camPos, dir, sky_t_radius);
		float shelldist = (length(end-start));
		// Take fewer steps towards horizon
		float steps = (mix(96.0, 54.0, clamp(dot(dir, vec3(0.0, 1.0, 0.0)), 0.0, 1.0)));
		vec3 raystep = dir * shelldist / steps;
		vec4 volume = march(start, end, raystep, int(steps));
		vec3 background = atmosphere(dir);
		// Draw cloud shape
		col = vec4(background*(1.0-volume.a)+volume.xyz, 1.0);
		// Blend distant clouds into the sky
		col.xyz = mix(clamp(col.xyz, vec3(0.0), vec3(1.0)), clamp(background, vec3(0.0), vec3(1.0)), smoothstep(0.6, 1.0, 1.0-dir.y));
	} else {
		col = vec4(atmosphere(dir), 1.0);
	}
	
	// Draw to quarter res buffer for reflections
	// Draw to half res buffer for main sky
	if (AT_QUARTER_RES_PASS && AT_CUBEMAP_PASS) {
		COLOR = col.xyz;
		ALPHA = 1.0;
	} else if (AT_HALF_RES_PASS && !AT_CUBEMAP_PASS) {
		COLOR = col.xyz;
		ALPHA = 1.0;
	} else if (AT_CUBEMAP_PASS) {
		COLOR = QUARTER_RES_COLOR.rgb;
	} else {
		COLOR = HALF_RES_COLOR.rgb; // Change to col.rgb for full resolution
	}
}"

[sub_resource type="CompressedTexture3D" id="CompressedTexture3D_4764s"]
load_path = "res://.godot/imported/perlworlnoise.tga-0051eacd8869a2bd053e1e4419daa9df.ctex3d"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_gawqm"]
load_path = "res://.godot/imported/weather.bmp-fd094cdc8d355e976d89fefd4cf8a848.s3tc.ctex"

[sub_resource type="CompressedTexture3D" id="CompressedTexture3D_fupch"]
load_path = "res://.godot/imported/worlnoise.bmp-3e989d5041eaa6471be4159cef76ea8c.s3tc.ctex3d"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_84jlq"]
shader = SubResource("Shader_7niad")
shader_parameter/_density = 0.07
shader_parameter/_time_offset = 0.0
shader_parameter/_time_scale = 1.0
shader_parameter/cloud_coverage = 0.133
shader_parameter/exposure = 0.1
shader_parameter/ground_color = Color(1, 1, 1, 1)
shader_parameter/mie = 0.005
shader_parameter/mie_color = Color(0.63, 0.77, 0.92, 1)
shader_parameter/mie_eccentricity = 0.8
shader_parameter/perlworlnoise = SubResource("CompressedTexture3D_4764s")
shader_parameter/rayleigh = 2.0
shader_parameter/rayleigh_color = Color(0.26, 0.41, 0.58, 1)
shader_parameter/sun_disk_scale = 1.0
shader_parameter/turbidity = 10.0
shader_parameter/weathermap = SubResource("CompressedTexture2D_gawqm")
shader_parameter/worlnoise = SubResource("CompressedTexture3D_fupch")

[sub_resource type="Sky" id="Sky_40162"]
sky_material = SubResource("ShaderMaterial_84jlq")

[sub_resource type="Environment" id="Environment_j0pxy"]
background_mode = 2
sky = SubResource("Sky_40162")
tonemap_mode = 3
tonemap_white = 16.0

[sub_resource type="AnimationNodeStateMachinePlayback" id="AnimationNodeStateMachinePlayback_bu4xk"]

[node name="3d_platform_test" type="Node3D"]

[node name="level" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.25, 0)

[node name="floor" type="StaticBody3D" parent="level"]

[node name="MeshInstance3d" type="MeshInstance3D" parent="level/floor"]
mesh = SubResource("BoxMesh_rbv4l")

[node name="CollisionShape3d" type="CollisionShape3D" parent="level/floor"]
shape = SubResource("ConvexPolygonShape3D_egi8v")

[node name="blocks" type="CSGCombiner3D" parent="level"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.26638, 0)
use_collision = true

[node name="ramp" type="CSGPolygon3D" parent="level/blocks"]
transform = Transform3D(15, 0, 0, 0, 5, 0, 0, 0, 10, -5.60385, -0.986872, -13.6252)
polygon = PackedVector2Array(0, 0, 0.00318277, 0.00989437, 1, 1, 1, 0)
material = ExtResource("2_2s66j")

[node name="great_wall" type="CSGBox3D" parent="level/blocks"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 17.0525, 1.49297, 0.10644)
size = Vector3(5, 5, 25)
material = SubResource("StandardMaterial3D_kw008")

[node name="great_wall2" type="CSGBox3D" parent="level/blocks"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 15.7751, 2.06656, 19.0982)
size = Vector3(8, 6, 5)
material = SubResource("StandardMaterial3D_kw008")

[node name="great_wall3" type="CSGBox3D" parent="level/blocks"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.60255, 2.97885, 19.0982)
size = Vector3(8, 8, 5)
material = SubResource("StandardMaterial3D_kw008")

[node name="great_wall4" type="CSGBox3D" parent="level/blocks"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4.30726, 3.54171, 19.0982)
size = Vector3(5, 10, 5)
material = SubResource("StandardMaterial3D_kw008")

[node name="great_wall5" type="CSGBox3D" parent="level/blocks"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 16.5408, 1.47024, -19.0097)
size = Vector3(5, 5, 10)
material = SubResource("StandardMaterial3D_kw008")

[node name="CsgTorus3d" type="CSGTorus3D" parent="level/blocks"]
transform = Transform3D(-4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, -10.1858, 10.5083, 19.3772)
inner_radius = 2.5
outer_radius = 3.0
sides = 12
material = ExtResource("4_cqotc")

[node name="house" parent="level" instance=ExtResource("5_vhhpf")]
transform = Transform3D(1.5, 0, 0, 0, 1.5, 0, 0, 0, 1.5, -17.034, 0, -16.559)

[node name="enviroment" type="Node3D" parent="."]

[node name="sky" type="Node3D" parent="enviroment"]
transform = Transform3D(1, 0.0003427, -0.00016891, -0.000355272, 0.671451, -0.741049, -0.000140556, 0.741049, 0.671451, 0, 0, 0)

[node name="WorldEnvironment" type="WorldEnvironment" parent="enviroment/sky"]
environment = SubResource("Environment_j0pxy")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="enviroment/sky"]
transform = Transform3D(0.920608, 0.376523, 0.10349, 0.317726, -0.876352, 0.362019, 0.227002, -0.300397, -0.926408, 0, 0, 0)
shadow_enabled = true

[node name="Camera3D" type="Camera3D" parent="enviroment/sky"]
transform = Transform3D(0.106334, -0.534699, -0.838325, -0.00173144, 0.843005, -0.537904, 0.994329, 0.0586487, 0.0887139, 0, 0, 0)

[node name="third_person_character" parent="." instance=ExtResource("3_p5bmj")]
transform = Transform3D(0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, -12.1349, 4.90968, 1.70907)

[node name="GeneralSkeleton" parent="third_person_character/pivot/humanoid/Armature" index="0"]
bones/0/position = Vector3(-4.66092e-07, 1.40873, 7.28722e-07)
bones/6/position = Vector3(-2.06731e-05, 0.260801, 0.0936838)
bones/14/position = Vector3(0.0113088, 0.0470816, 0.00652986)
bones/18/position = Vector3(1.32183e-07, 0.043451, -3.8897e-06)
bones/26/position = Vector3(-0.0113017, 0.0470831, 0.0065308)
bones/30/position = Vector3(6.97071e-08, 0.0434512, 3.77968e-06)
bones/35/position = Vector3(-0.00200543, 0.141131, 0.00247357)
bones/40/position = Vector3(0.00200171, 0.141131, 0.00247055)

[node name="animation_tree" parent="third_person_character/pivot/humanoid" index="2"]
parameters/playback = SubResource("AnimationNodeStateMachinePlayback_bu4xk")

[node name="head_attach" parent="third_person_character/pivot/humanoid/hit_boxes" index="0"]
transform = Transform3D(-1, 1.44929e-11, -8.74283e-08, 1.44948e-11, 1, -2.21567e-08, 8.74283e-08, -2.21567e-08, -1, 2.09808e-05, 2.90787, -0.0871341)

[node name="body_attach" parent="third_person_character/pivot/humanoid/hit_boxes" index="1"]
transform = Transform3D(-1, 7.27504e-12, -8.74264e-08, 7.27568e-12, 1, -7.25551e-09, 8.74264e-08, -7.25551e-09, -1, 0, 1.87182, 0.00219154)

[node name="Camera3d" parent="third_person_character/SpringArm3d" index="0"]
current = true

[node name="ui" type="Control" parent="."]
process_mode = 3
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("7_atcry")

[node name="pause_screen" parent="ui" instance=ExtResource("10_o2lfx")]
visible = false
layout_mode = 1

[node name="MarginContainer" type="MarginContainer" parent="ui"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 120
theme_override_constants/margin_top = 80
theme_override_constants/margin_right = 120
theme_override_constants/margin_bottom = 80

[node name="HBoxContainer" type="HBoxContainer" parent="ui/MarginContainer"]
layout_mode = 2
offset_left = 1556.0
offset_top = 80.0
offset_right = 1800.0
offset_bottom = 200.0
size_flags_horizontal = 8
size_flags_vertical = 0

[node name="fullscreen_button" parent="ui/MarginContainer/HBoxContainer" instance=ExtResource("4_3nhlw")]
layout_mode = 2
anchors_preset = 0
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
offset_left = 0.0
offset_top = 0.0
offset_right = 120.0
offset_bottom = 120.0
grow_horizontal = 0
grow_vertical = 1
size_flags_horizontal = 4
size_flags_vertical = 4

[node name="back_button" parent="ui/MarginContainer/HBoxContainer" instance=ExtResource("8_5a43x")]
layout_mode = 2
anchors_preset = 0
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
offset_left = 124.0
offset_right = 244.0
offset_bottom = 120.0
grow_horizontal = 1
grow_vertical = 1
size_flags_horizontal = 4
size_flags_vertical = 4

[node name="HBoxContainer2" type="HBoxContainer" parent="ui/MarginContainer"]
layout_mode = 2
offset_left = 120.0
offset_top = 80.0
offset_right = 240.0
offset_bottom = 200.0
size_flags_horizontal = 0
size_flags_vertical = 0

[node name="pause_button" parent="ui/MarginContainer/HBoxContainer2" instance=ExtResource("9_th6ak")]
layout_mode = 2
anchors_preset = 0
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
offset_left = 0.0
offset_top = 0.0
offset_right = 120.0
offset_bottom = 120.0
grow_horizontal = 1
grow_vertical = 1

[node name="VBoxContainer" type="VBoxContainer" parent="ui/MarginContainer"]
layout_mode = 2
offset_left = 120.0
offset_top = 932.0
offset_right = 685.0
offset_bottom = 1000.0
size_flags_horizontal = 0
size_flags_vertical = 8

[node name="HBoxContainer" type="HBoxContainer" parent="ui/MarginContainer/VBoxContainer"]
layout_mode = 2
offset_right = 565.0
offset_bottom = 68.0
theme_override_constants/separation = 48

[node name="state_label" type="Label" parent="ui/MarginContainer/VBoxContainer/HBoxContainer"]
modulate = Color(0, 0, 0, 1)
layout_mode = 2
offset_right = 228.0
offset_bottom = 68.0
size_flags_vertical = 8
theme = ExtResource("12_htkkk")
text = "Estado:"
vertical_alignment = 2

[node name="state" type="Label" parent="ui/MarginContainer/VBoxContainer/HBoxContainer"]
modulate = Color(0.486275, 0, 0.87451, 1)
layout_mode = 2
offset_left = 276.0
offset_top = 16.0
offset_right = 565.0
offset_bottom = 68.0
size_flags_vertical = 8
theme = ExtResource("13_84dsg")
text = "Estado Atual"
vertical_alignment = 2

[node name="information_panel" type="VBoxContainer" parent="ui/MarginContainer"]
layout_mode = 2
offset_left = 1680.0
offset_top = 880.0
offset_right = 1800.0
offset_bottom = 1000.0
size_flags_horizontal = 8
size_flags_vertical = 8
theme_override_constants/separation = 48

[node name="information_button" parent="ui/MarginContainer/information_panel" instance=ExtResource("19_3iy03")]
layout_mode = 2
anchors_preset = 0
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
offset_right = 120.0
offset_bottom = 120.0
grow_horizontal = 1
grow_vertical = 1
text = "Ver Comandos"

[node name="VBoxContainer" parent="ui/MarginContainer/information_panel/information_button" index="0"]
layout_mode = 1

[node name="button" parent="ui/MarginContainer/information_panel/information_button/VBoxContainer" index="0"]
layout_mode = 2
texture_normal = ExtResource("20_boi75")
texture_hover = ExtResource("21_nxh3y")

[node name="hint" parent="ui/MarginContainer/information_panel/information_button/VBoxContainer" index="1"]
layout_mode = 2

[node name="VBoxContainer2" type="VBoxContainer" parent="ui/MarginContainer/information_panel"]
visible = false
layout_mode = 2
offset_top = 168.0
offset_right = 333.0
offset_bottom = 684.0
size_flags_horizontal = 8
size_flags_vertical = 8

[node name="HBoxContainer" type="HBoxContainer" parent="ui/MarginContainer/information_panel/VBoxContainer2"]
layout_mode = 2
offset_right = 333.0
offset_bottom = 100.0
theme_override_constants/separation = 48

[node name="TextureRect" type="TextureRect" parent="ui/MarginContainer/information_panel/VBoxContainer2/HBoxContainer"]
custom_minimum_size = Vector2i(100, 100)
layout_mode = 2
offset_right = 100.0
offset_bottom = 100.0
size_flags_horizontal = 4
size_flags_vertical = 8
texture = ExtResource("14_ydcgs")
ignore_texture_size = true
stretch_mode = 5

[node name="Label" type="Label" parent="ui/MarginContainer/information_panel/VBoxContainer2/HBoxContainer"]
modulate = Color(0, 0, 0, 1)
layout_mode = 2
offset_left = 148.0
offset_top = 24.0
offset_right = 293.0
offset_bottom = 76.0
size_flags_horizontal = 4
theme = ExtResource("13_84dsg")
text = "Mover"
vertical_alignment = 1

[node name="HBoxContainer2" type="HBoxContainer" parent="ui/MarginContainer/information_panel/VBoxContainer2"]
layout_mode = 2
offset_top = 104.0
offset_right = 333.0
offset_bottom = 204.0
theme_override_constants/separation = 48

[node name="TextureRect" type="TextureRect" parent="ui/MarginContainer/information_panel/VBoxContainer2/HBoxContainer2"]
custom_minimum_size = Vector2i(100, 100)
layout_mode = 2
offset_right = 100.0
offset_bottom = 100.0
size_flags_horizontal = 4
size_flags_vertical = 8
texture = ExtResource("15_d50kw")
ignore_texture_size = true
stretch_mode = 5

[node name="Label" type="Label" parent="ui/MarginContainer/information_panel/VBoxContainer2/HBoxContainer2"]
modulate = Color(0, 0, 0, 1)
layout_mode = 2
offset_left = 148.0
offset_top = 24.0
offset_right = 320.0
offset_bottom = 76.0
size_flags_horizontal = 4
theme = ExtResource("13_84dsg")
text = "Câmera
"
vertical_alignment = 1

[node name="HBoxContainer3" type="HBoxContainer" parent="ui/MarginContainer/information_panel/VBoxContainer2"]
layout_mode = 2
offset_top = 208.0
offset_right = 333.0
offset_bottom = 308.0
theme_override_constants/separation = 48

[node name="TextureRect" type="TextureRect" parent="ui/MarginContainer/information_panel/VBoxContainer2/HBoxContainer3"]
custom_minimum_size = Vector2i(100, 100)
layout_mode = 2
offset_right = 100.0
offset_bottom = 100.0
size_flags_horizontal = 4
size_flags_vertical = 8
texture = ExtResource("16_2qreg")
ignore_texture_size = true
stretch_mode = 5

[node name="Label" type="Label" parent="ui/MarginContainer/information_panel/VBoxContainer2/HBoxContainer3"]
modulate = Color(0, 0, 0, 1)
layout_mode = 2
offset_left = 148.0
offset_top = 24.0
offset_right = 268.0
offset_bottom = 76.0
size_flags_horizontal = 4
theme = ExtResource("13_84dsg")
text = "Pular
"
vertical_alignment = 1

[node name="HBoxContainer4" type="HBoxContainer" parent="ui/MarginContainer/information_panel/VBoxContainer2"]
layout_mode = 2
offset_top = 312.0
offset_right = 333.0
offset_bottom = 412.0
theme_override_constants/separation = 48

[node name="TextureRect" type="TextureRect" parent="ui/MarginContainer/information_panel/VBoxContainer2/HBoxContainer4"]
custom_minimum_size = Vector2i(100, 100)
layout_mode = 2
offset_right = 100.0
offset_bottom = 100.0
size_flags_horizontal = 4
size_flags_vertical = 8
texture = ExtResource("17_uf3nf")
ignore_texture_size = true
stretch_mode = 5

[node name="Label" type="Label" parent="ui/MarginContainer/information_panel/VBoxContainer2/HBoxContainer4"]
modulate = Color(0, 0, 0, 1)
layout_mode = 2
offset_left = 148.0
offset_top = 24.0
offset_right = 291.0
offset_bottom = 76.0
size_flags_horizontal = 4
theme = ExtResource("13_84dsg")
text = "Correr
"
vertical_alignment = 1

[node name="HBoxContainer5" type="HBoxContainer" parent="ui/MarginContainer/information_panel/VBoxContainer2"]
layout_mode = 2
offset_top = 416.0
offset_right = 333.0
offset_bottom = 516.0
theme_override_constants/separation = 48

[node name="TextureRect" type="TextureRect" parent="ui/MarginContainer/information_panel/VBoxContainer2/HBoxContainer5"]
custom_minimum_size = Vector2i(100, 100)
layout_mode = 2
offset_right = 100.0
offset_bottom = 100.0
size_flags_horizontal = 4
size_flags_vertical = 8
texture = ExtResource("18_ivlgj")
ignore_texture_size = true
stretch_mode = 5

[node name="Label" type="Label" parent="ui/MarginContainer/information_panel/VBoxContainer2/HBoxContainer5"]
modulate = Color(0, 0, 0, 1)
layout_mode = 2
offset_left = 148.0
offset_top = 24.0
offset_right = 333.0
offset_bottom = 76.0
size_flags_horizontal = 4
theme = ExtResource("13_84dsg")
text = "Agachar
"
vertical_alignment = 1

[connection signal="button_up" from="ui/MarginContainer/information_panel/information_button/VBoxContainer/button" to="ui" method="_on_information_button_up"]

[editable path="third_person_character"]
[editable path="ui/MarginContainer/information_panel/information_button"]
